{"version":3,"sources":["lib/actions/AWSActions.js"],"names":["AWS","config","require","_logger","getLogger","_this","AWSActions","param","callback","debug","ec2options","apiVersion","region","webproxy","httpOptions","proxy","sslEnabled","ec2","EC2","info","JSON","stringify","action","toLowerCase","startInstance","instanceId","stopInstance","stopInstances","instanceIds","InstanceIds","err","data","error","stack","startInstances","Components","name","description","create"],"mappings":"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","file":"AWSActions.js","sourcesContent":["'use strict';\n\nimport * as AWS from 'aws-sdk';\nimport ActionBase from '../engine/action';\nlet config = require('../config/config.json');\nimport { logger } from '../infra/logger';\nlet _logger = logger.getLogger('AWSActions');\n\n// {\n//  action: 'getInstance | getInstances | startInstance | stopInstance | terminateInstance | <launchInstance>',\n//  instanceId: '',\n//  region: '',\n// }\nlet _this = null;\n\nexport class AWSActions extends ActionBase {\n    constructor(param, callback) {\n        super(param, callback);\n        _this = this;\n        _logger.debug('initializing...');\n        var ec2options = { apiVersion: '2016-09-15', region: \"us-west-2\" };\n        if (config.webproxy) {\n            ec2options.httpOptions = {\n                proxy: config.webproxy\n            };\n            ec2options.sslEnabled = false;\n        }\n        this.ec2 = new AWS.EC2(ec2options);\n    }\n\n    trigger() {\n        _logger.info(`aws action triggered with parameter: ${JSON.stringify(this.param)}`);\n        switch (this.param.action.toLowerCase()) {\n            case 'getinstance':\n                break;\n            case 'getinstances':\n                break;\n            case 'startinstance':\n                this.startInstance(this.param.instanceId, this.callback);\n                break;\n            case 'stopinstance':\n                this.stopInstance(this.param.instanceId, this.callback);\n                break;\n            case 'stopinstances':\n                this.stopInstances(this.param.instanceIds, this.callback);\n                break;\n            default:\n                break;\n        }\n    }\n\n    stopInstance(instanceId, callback) {\n        this.stopInstances([instanceId], callback);\n    }\n\n    stopInstances(instanceIds, callback) {\n        this.ec2.stopInstances({\n            InstanceIds: instanceIds\n        }, (err, data) => {\n            if (err) {\n                _logger.error(err, err.stack);\n                callback(_this, err, data);\n            } else {\n                callback(_this, null, data);\n            }\n        });\n    }\n\n    startInstance(instanceId, callback) {\n        this.startInstances([instanceId], callback);\n    }\n\n    startInstances(instanceIds, callback) {\n        this.ec2.startInstances({\n            InstanceIds: instanceIds\n        }, (err, data) => {\n            if (err) {\n                _logger.error(err, err.stack);\n                callback(_this, err, data);\n            } else {\n                callback(_this, null, data);\n            }\n        });\n    }\n\n    destroy() {\n        this.ec2 = null;\n        _this = null;\n    }\n}\n\nexport let Components = [{\n    name: \"AWSEC2Actions\",\n    description: \"actions for aws ec2 operations\",\n    create: (param, callback) => {\n        return new AWSActions(param, callback);\n    }\n}];"],"sourceRoot":"d:\\lab\\awscheduler\\src"}
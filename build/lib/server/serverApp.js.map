{"version":3,"sources":["lib/server/serverApp.js"],"names":["_logger","getLogger","ServerApp","_app","use","urlencoded","extended","json","then","into","info","listen","serverApp"],"mappings":"AAAA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,UAAU,gBAAOC,SAAP,CAAiB,WAAjB,CAAd;;IAEMC,S;AACF,yBAAc;AAAA;;AACV,aAAKC,IAAL,GAAY,wBAAZ;AACA,aAAKA,IAAL,CAAUC,GAAV,CAAc,qBAAWC,UAAX,CAAsB;AAChCC,sBAAU;AADsB,SAAtB,CAAd;AAGA,aAAKH,IAAL,CAAUC,GAAV,CAAc,qBAAWG,IAAX,EAAd;AACA,aAAKJ,IAAL,CAAUC,GAAV;AACA,mCAAY,iBAAZ,EACKI,IADL,CACU,YADV,EAEKC,IAFL,CAEU,KAAKN,IAFf;AAGH;;;;sCAEa;AACVH,oBAAQU,IAAR,CAAa,+CAAb;AACA,iBAAKP,IAAL,CAAUQ,MAAV,CAAiB,IAAjB;AACH;;;;;;AAGE,IAAIC,gCAAY,IAAIV,SAAJ,EAAhB","file":"serverApp.js","sourcesContent":["'use strict';\n\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport requestDebugger from '../midwares/requestDebugger';\nimport expressLoad from 'express-load';\nimport { logger } from '../infra/logger';\n\nlet _logger = logger.getLogger('serverApp');\n\nclass ServerApp {\n    constructor() {\n        this._app = express();\n        this._app.use(bodyParser.urlencoded({\n            extended: true\n        }));\n        this._app.use(bodyParser.json());\n        this._app.use(requestDebugger);\n        expressLoad('lib/controllers')\n            .then('lib/routes')\n            .into(this._app);\n    }\n\n    startServer() {\n        _logger.info('starting the express server listening on 8080');\n        this._app.listen(8080);\n    }\n}\n\nexport let serverApp = new ServerApp();"],"sourceRoot":"d:\\lab\\awscheduler\\src"}
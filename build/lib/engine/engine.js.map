{"version":3,"sources":["lib/engine/engine.js"],"names":["path","fs","uuid","_","_logger","getLogger","COMPONENT_TYPE_ACTION","COMPONENT_TYPE_TRIGGER","COMPONENT_TYPE_CONDITION","LOCATION_ACTIONS","LOCATION_TRIGGERS","LOCATION_CONDITIONS","_this","Engine","info","triggers","actions","conditions","_loadAllComponent","jobs","type","error","debug","_loadComponent","componentLocation","_getComponentLocation","location","resolve","normalize","result","statSync","isDirectory","dir","readdirSync","file","script","join","endsWith","concat","require","Components","job","callback","jobId","v4","cloneDeep","length","i","actionType","find","o","name","action","create","param","obj","err","data","JSON","stringify","push","triggerEvent","trigger","triggerType","stopJob","engine"],"mappings":"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","file":"engine.js","sourcesContent":["'use strict';\n\n// engine will load all the types of trigger, condition, actions. and then do the job\n\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport * as uuid from 'node-uuid';\nimport * as _ from 'lodash';\nimport { logger } from '../infra/logger';\nlet _logger = logger.getLogger('Engine');\n\nconst COMPONENT_TYPE_ACTION = 'action';\nconst COMPONENT_TYPE_TRIGGER = 'trigger';\nconst COMPONENT_TYPE_CONDITION = 'condition';\n\nconst LOCATION_ACTIONS = 'lib/actions';\nconst LOCATION_TRIGGERS = 'lib/triggers';\nconst LOCATION_CONDITIONS = 'lib/conditions';\n\nlet _this = null;\n\nexport class Engine {\n    constructor() {\n        _this = this;\n        _logger.info('initializing...');\n        this.triggers = [];\n        this.actions = [];\n        this.conditions = [];\n        this._loadAllComponent();\n        this.jobs = {};\n    }\n\n    _getComponentLocation(type) {\n        switch (type) {\n            case COMPONENT_TYPE_TRIGGER:\n                return LOCATION_TRIGGERS;\n            case COMPONENT_TYPE_CONDITION:\n                return LOCATION_CONDITIONS;\n            case COMPONENT_TYPE_ACTION:\n                return LOCATION_ACTIONS;\n            default:\n                _logger.error('invalid component type for the engine');\n                return null;\n        }\n    }\n\n    _loadAllComponent() {\n        _logger.debug('loading all triggers, actions & conditions...');\n        this.triggers = this._loadComponent(COMPONENT_TYPE_TRIGGER);\n        this.actions = this._loadComponent(COMPONENT_TYPE_ACTION);\n        this.conditions = this._loadComponent(COMPONENT_TYPE_CONDITION);\n    }\n\n    _loadComponent(type) {\n        var componentLocation = this._getComponentLocation(type);\n        var location = path.resolve(path.normalize(componentLocation));\n        let result = [];\n\n        if (fs.statSync(location).isDirectory()) {\n            var dir = fs.readdirSync(location);\n            for (var file in dir) {\n                var script = path.normalize(path.join(location, dir[file]));\n                if (fs.statSync(script).isDirectory() || script.endsWith('.js')) {\n                    result = result.concat(require(script).Components);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    // { \"name\": \"whatjob\", \"description\": \"blabla\", \"triggers\": [{ \"type\": \"CronTrigger\", \"param\": { \"cron\": \"* * * * *\" } }], \"conditions\": [], \"actions\": [ { \"type\": \"ConsoleAction\", \"param\": { \"format\": \"%s is this\", params: [\"what?\"] } } ] }\n    createJob(job, callback) {\n        //create job id\n        var jobId = uuid.v4();\n        this.jobs[jobId] = _.cloneDeep(job);\n        this.jobs[jobId].jobId = jobId;\n        this.jobs[jobId].triggers = [];\n        this.jobs[jobId].conditions = [];\n        this.jobs[jobId].actions = [];\n\n        if (job.actions) {\n            var length = job.actions.length;\n            for (var i = 0; i < length; i++) {\n                var actionType = _.find(this.actions, o => o.name === job.actions[i].type);\n                var action = actionType.create(job.actions[i].param, (obj, err, data) => {\n                    if (err) {\n                    } else {\n                        _logger.info('job action done. with data: ' + JSON.stringify(data));\n                    }\n                });\n                this.jobs[jobId].actions.push(action);\n            }\n        }\n\n        // we should use _this here because it was called by the trigger.\n        let triggerEvent = (obj, err, param) => {\n            var length = _this.jobs[jobId].actions.length;\n            _logger.debug(`trigger triggered with parameter ${JSON.stringify(param)}`);\n\n            // run all actions...\n            for (var i = 0; i < length; i++) {\n                _this.jobs[jobId].actions[i].trigger();\n            }\n        };\n\n        if (job.triggers) {\n\n            length = job.triggers.length;\n            for (var i = 0; i < length; i++) {\n                var triggerType = _.find(this.triggers, o => o.name === job.triggers[i].type);\n                var trigger = triggerType.create(job.triggers[i].param, triggerEvent);\n                this.jobs[jobId].triggers.push(trigger);\n            }\n        } else {\n            // just run all the actions... \n            //TODO: one shot job, we can clean up it then.\n            triggerEvent();\n            stopJob(jobId);\n        }\n\n        return this.jobs[jobId];\n    }\n\n    stopJob(jobId) {\n        //TODO: destroy all resources related to this job.\n    }\n}\n\nexport let engine = new Engine();"],"sourceRoot":"d:\\lab\\awscheduler\\src"}
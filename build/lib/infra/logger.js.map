{"version":3,"sources":["lib/infra/logger.js"],"names":["log4js","fs","Logger","logdir","getLogPath","existsSync","mkdirSync","configure","appenders","type","filename","getLogger","apply","arguments","logger"],"mappings":"AAAA;;;;;;;;;AACA;;IAAYA,M;;AACZ;;IAAYC,E;;AACZ;;;;;;IAEMC,M;AAEF,sBAAc;AAAA;;AACV,YAAIC,SAAS,eAAOC,UAAP,EAAb;;AAEA,YAAI,CAACH,GAAGI,UAAH,CAAcF,MAAd,CAAL,EAA4B;AACxBF,eAAGK,SAAH,CAAaH,MAAb;AACH;;AAEDH,eAAOO,SAAP,CAAiB;AACbC,uBAAW,CACP;AACIC,sBAAM;AADV,aADO,EAIP;AACIA,sBAAM,MADV,EACkBC,UAAUP,SAAS;AADrC,aAJO;AADE,SAAjB;AAUH;;;;oCAEW;AACR,mBAAOH,OAAOW,SAAP,CAAiBC,KAAjB,CAAuBZ,MAAvB,EAA+Ba,SAA/B,CAAP;AACH;;;;;;AAGE,IAAIC,0BAAS,IAAIZ,MAAJ,EAAb","file":"logger.js","sourcesContent":["'use strict';\nimport * as log4js from 'log4js';\nimport * as fs from 'fs';\nimport { myPath } from './myPath'\n\nclass Logger {\n\n    constructor() {\n        var logdir = myPath.getLogPath();\n        \n        if (!fs.existsSync(logdir)) {\n            fs.mkdirSync(logdir);\n        }\n\n        log4js.configure({\n            appenders: [\n                {\n                    type: 'console'\n                },\n                {\n                    type: 'file', filename: logdir + 'agent.log'\n                }\n            ]\n        });\n    }\n\n    getLogger() {\n        return log4js.getLogger.apply(log4js, arguments);\n    }\n}\n\nexport let logger = new Logger();"],"sourceRoot":"d:\\lab\\awscheduler\\src"}